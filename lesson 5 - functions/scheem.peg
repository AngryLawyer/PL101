// Start
start =
    whitespace* exp: expression whitespace*
        { return exp; }

// Basic characters
validchar = 
    [-0-9a-zA-Z_?!+\=@#$%^&*/.<>]

space = 
    [ \t]

standardspace = 
    space
  / [\n\r]

endline = 
    [\n]
  / "\r\n"
  / "\n\r"

stringchar = 
    [()\[\]{};'\\/,]
  / space
  / validchar

commentchar = 
    ["]
  / stringchar

// Objects

atom =
    chars:validchar+
        {
            var string = chars.join("");
            if (isNaN(string))
                return string;
            return parseFloat(string);
        }
   
comment = 
    ";" commentchar* endline*

whitespace =
    comment
  / standardspace

string = 
    ["] str: (stringchar / standardspace)* ["]
        { return "\"" + str.join("") + "\""; }
        
expression =
    whitespace* right: (atom / string)
        { return right; }
  / whitespace* ['] exp: expression
        { return ['quote', exp]; }
  / whitespace* [(] middle: expression+ whitespace* [)]
        { return middle; }
  / whitespace* [(] whitespace* [)]
        { return []; }
